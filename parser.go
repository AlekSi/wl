// Code generated by goyacc - DO NOT EDIT.

// Copyright 2017 The WL Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package wl

import __yyfmt__ "fmt"

type yySymType struct {
	yys   int
	Node  Node
	Token Token
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault   = 57357
	yyEofCode   = 57344
	AND         = 57346
	CONDITION   = 57347
	FLOAT       = 57348
	IDENTIFIER  = 57349
	INT         = 57350
	MESSAGE     = 57351
	PATTERN     = 57352
	SET_DELAYED = 57353
	STRING      = 57354
	UNARY       = 57355
	UNSAME      = 57356
	yyErrCode   = 57345

	yyMaxDepth = 200
	yyTabOfs   = -28
)

var (
	yyFollow = [][]int{
		{40, 45, 123, 57358, 57348, 57349, 57350, 57352, 57354, 57360}, // state 0
		{57344}, // state 1
		{57344, 33, 42, 43, 47, 59, 61, 57346, 57347, 57353, 57356},                             // state 2
		{57344, 33, 41, 42, 43, 44, 47, 59, 61, 93, 125, 57346, 57347, 57353, 57356},            // state 3
		{57344, 33, 41, 42, 43, 44, 47, 59, 61, 91, 93, 125, 57346, 57347, 57351, 57353, 57356}, // state 4
		{57344, 33, 41, 42, 43, 44, 47, 59, 61, 93, 125, 57346, 57347, 57353, 57356},            // state 5
		{57344, 33, 41, 42, 43, 44, 47, 59, 61, 93, 125, 57346, 57347, 57353, 57356},            // state 6
		{57344, 33, 41, 42, 43, 44, 47, 59, 61, 93, 125, 57346, 57347, 57353, 57356},            // state 7
		{40, 45, 123, 57358, 57348, 57349, 57350, 57352, 57354},                                 // state 8
		{40, 45, 123, 57358, 57348, 57349, 57350, 57352, 57354},                                 // state 9
		{40, 45, 123, 125, 57358, 57359, 57348, 57349, 57350, 57352, 57354},                     // state 10
		{57344, 33, 41, 42, 43, 44, 47, 59, 61, 93, 125, 57346, 57347, 57353, 57356},            // state 11
		{44, 125}, // state 12
		{33, 42, 43, 44, 47, 61, 93, 125, 57346, 57347, 57353, 57356},                // state 13
		{40, 45, 123, 57358, 57348, 57349, 57350, 57352, 57354},                      // state 14
		{40, 45, 123, 57358, 57348, 57349, 57350, 57352, 57354},                      // state 15
		{40, 45, 123, 57358, 57348, 57349, 57350, 57352, 57354},                      // state 16
		{40, 45, 123, 57358, 57348, 57349, 57350, 57352, 57354},                      // state 17
		{57344, 33, 41, 42, 43, 44, 47, 59, 61, 93, 125, 57346, 57347, 57353, 57356}, // state 18
		{40, 45, 123, 57358, 57348, 57349, 57350, 57352, 57354},                      // state 19
		{40, 45, 123, 57358, 57348, 57349, 57350, 57352, 57354},                      // state 20
		{40, 45, 123, 57358, 57348, 57349, 57350, 57352, 57354},                      // state 21
		{40, 45, 123, 57358, 57348, 57349, 57350, 57352, 57354},                      // state 22
		{57344, 33, 41, 42, 43, 44, 47, 59, 61, 93, 125, 57346, 57347, 57353, 57356}, // state 23
		{57344, 33, 41, 42, 43, 44, 47, 59, 61, 93, 125, 57346, 57347, 57353, 57356}, // state 24
		{57344, 33, 41, 42, 43, 44, 47, 59, 61, 93, 125, 57346, 57347, 57353, 57356}, // state 25
		{57344, 33, 41, 42, 43, 44, 47, 59, 61, 93, 125, 57346, 57347, 57353, 57356}, // state 26
		{57344, 33, 41, 42, 43, 44, 47, 59, 61, 93, 125, 57346, 57347, 57353, 57356}, // state 27
		{57344, 33, 41, 42, 43, 44, 47, 59, 61, 93, 125, 57346, 57347, 57353, 57356}, // state 28
		{57344, 33, 41, 42, 43, 44, 47, 59, 61, 93, 125, 57346, 57347, 57353, 57356}, // state 29
		{57344, 33, 41, 42, 43, 44, 47, 59, 61, 93, 125, 57346, 57347, 57353, 57356}, // state 30
		{57344, 33, 41, 42, 43, 44, 47, 59, 61, 93, 125, 57346, 57347, 57353, 57356}, // state 31
		{40, 45, 123, 57358, 57348, 57349, 57350, 57352, 57354},                      // state 32
		{33, 42, 43, 44, 47, 61, 93, 125, 57346, 57347, 57353, 57356},                // state 33
		{57344, 33, 41, 42, 43, 44, 47, 59, 61, 93, 125, 57346, 57347, 57353, 57356}, // state 34
		{33, 41, 42, 43, 47, 61, 57346, 57347, 57353, 57356},                         // state 35
		{57344, 33, 41, 42, 43, 44, 47, 59, 61, 93, 125, 57346, 57347, 57353, 57356}, // state 36
		{57349, 57354, 57361},                                                        // state 37
		{40, 45, 123, 57358, 57359, 57348, 57349, 57350, 57352, 57354},               // state 38
		{44, 93}, // state 39
		{57344, 33, 41, 42, 43, 44, 47, 59, 61, 93, 125, 57346, 57347, 57353, 57356}, // state 40
		{61, 57351},                                                                  // state 41
		{61, 57351},                                                                  // state 42
		{61, 57351},                                                                  // state 43
		{57349, 57354, 57361},                                                        // state 44
		{40, 45, 123, 57358, 57348, 57349, 57350, 57352, 57354},                      // state 45
		{57344, 33, 41, 42, 43, 44, 47, 59, 61, 93, 125, 57346, 57347, 57353, 57356}, // state 46
		{61}, // state 47
		{40, 45, 123, 57358, 57348, 57349, 57350, 57352, 57354},                      // state 48
		{57344, 33, 41, 42, 43, 44, 47, 59, 61, 93, 125, 57346, 57347, 57353, 57356}, // state 49
		{57344}, // state 50
	}

	yyXLAT = map[int]int{
		61:    0,  // '=' (29x)
		33:    1,  // '!' (25x)
		42:    2,  // '*' (25x)
		43:    3,  // '+' (25x)
		44:    4,  // ',' (25x)
		47:    5,  // '/' (25x)
		125:   6,  // '}' (25x)
		57346: 7,  // AND (25x)
		57347: 8,  // CONDITION (25x)
		57353: 9,  // SET_DELAYED (25x)
		57356: 10, // UNSAME (25x)
		57344: 11, // $end (24x)
		93:    12, // ']' (24x)
		41:    13, // ')' (22x)
		59:    14, // ';' (22x)
		57349: 15, // IDENTIFIER (18x)
		57354: 16, // STRING (18x)
		40:    17, // '(' (16x)
		45:    18, // '-' (16x)
		123:   19, // '{' (16x)
		57358: 20, // Expr (16x)
		57348: 21, // FLOAT (16x)
		57350: 22, // INT (16x)
		57352: 23, // PATTERN (16x)
		57351: 24, // MESSAGE (4x)
		57359: 25, // ExprList (2x)
		57361: 26, // Tag (2x)
		91:    27, // '[' (1x)
		57360: 28, // Start (1x)
		57357: 29, // $default (0x)
		57345: 30, // error (0x)
		57355: 31, // UNARY (0x)
	}

	yySymNames = []string{
		"'='",
		"'!'",
		"'*'",
		"'+'",
		"','",
		"'/'",
		"'}'",
		"AND",
		"CONDITION",
		"SET_DELAYED",
		"UNSAME",
		"$end",
		"']'",
		"')'",
		"';'",
		"IDENTIFIER",
		"STRING",
		"'('",
		"'-'",
		"'{'",
		"Expr",
		"FLOAT",
		"INT",
		"PATTERN",
		"MESSAGE",
		"ExprList",
		"Tag",
		"'['",
		"Start",
		"$default",
		"error",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{
		57346: "&&",
		57347: "/;",
		57353: ":=",
		57356: "=!=",
		57349: "identifier",
		57354: "string literal",
		57348: "floating point literal",
		57350: "integer literal",
		57352: "pattern",
		57351: "::",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {28, 1},
		2:  {28, 2},
		3:  {20, 1},
		4:  {20, 1},
		5:  {20, 7},
		6:  {20, 5},
		7:  {20, 4},
		8:  {20, 1},
		9:  {20, 1},
		10: {20, 1},
		11: {20, 3},
		12: {20, 2},
		13: {20, 2},
		14: {20, 3},
		15: {20, 3},
		16: {20, 3},
		17: {20, 3},
		18: {20, 3},
		19: {20, 2},
		20: {20, 3},
		21: {20, 3},
		22: {20, 3},
		23: {20, 3},
		24: {25, 1},
		25: {25, 3},
		26: {26, 1},
		27: {26, 1},
	}

	yyXErrors = map[yyXError]string{
		yyXError{0, 11}:  "invalid empty input",
		yyXError{1, -1}:  "expected $end",
		yyXError{50, -1}: "expected $end",
		yyXError{47, -1}: "expected '='",
		yyXError{8, -1}:  "expected Expr or one of ['(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		yyXError{9, -1}:  "expected Expr or one of ['(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		yyXError{14, -1}: "expected Expr or one of ['(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		yyXError{15, -1}: "expected Expr or one of ['(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		yyXError{16, -1}: "expected Expr or one of ['(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		yyXError{17, -1}: "expected Expr or one of ['(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		yyXError{19, -1}: "expected Expr or one of ['(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		yyXError{20, -1}: "expected Expr or one of ['(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		yyXError{21, -1}: "expected Expr or one of ['(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		yyXError{22, -1}: "expected Expr or one of ['(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		yyXError{32, -1}: "expected Expr or one of ['(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		yyXError{45, -1}: "expected Expr or one of ['(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		yyXError{48, -1}: "expected Expr or one of ['(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		yyXError{10, -1}: "expected ExprList or one of ['(', '-', '{', '}', floating point literal, identifier, integer literal, pattern, string literal]",
		yyXError{38, -1}: "expected ExprList or one of ['(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		yyXError{0, -1}:  "expected Start or one of ['(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		yyXError{37, -1}: "expected Tag or one of [identifier, string literal]",
		yyXError{44, -1}: "expected Tag or one of [identifier, string literal]",
		yyXError{4, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '/', ';', '=', '[', ']', '}', /;, ::, :=, =!=]",
		yyXError{3, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '/', ';', '=', ']', '}', /;, :=, =!=]",
		yyXError{5, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '/', ';', '=', ']', '}', /;, :=, =!=]",
		yyXError{6, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '/', ';', '=', ']', '}', /;, :=, =!=]",
		yyXError{7, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '/', ';', '=', ']', '}', /;, :=, =!=]",
		yyXError{11, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '/', ';', '=', ']', '}', /;, :=, =!=]",
		yyXError{18, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '/', ';', '=', ']', '}', /;, :=, =!=]",
		yyXError{23, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '/', ';', '=', ']', '}', /;, :=, =!=]",
		yyXError{24, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '/', ';', '=', ']', '}', /;, :=, =!=]",
		yyXError{25, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '/', ';', '=', ']', '}', /;, :=, =!=]",
		yyXError{26, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '/', ';', '=', ']', '}', /;, :=, =!=]",
		yyXError{27, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '/', ';', '=', ']', '}', /;, :=, =!=]",
		yyXError{28, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '/', ';', '=', ']', '}', /;, :=, =!=]",
		yyXError{29, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '/', ';', '=', ']', '}', /;, :=, =!=]",
		yyXError{30, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '/', ';', '=', ']', '}', /;, :=, =!=]",
		yyXError{31, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '/', ';', '=', ']', '}', /;, :=, =!=]",
		yyXError{34, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '/', ';', '=', ']', '}', /;, :=, =!=]",
		yyXError{36, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '/', ';', '=', ']', '}', /;, :=, =!=]",
		yyXError{40, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '/', ';', '=', ']', '}', /;, :=, =!=]",
		yyXError{46, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '/', ';', '=', ']', '}', /;, :=, =!=]",
		yyXError{49, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '/', ';', '=', ']', '}', /;, :=, =!=]",
		yyXError{2, -1}:  "expected one of [$end, &&, '!', '*', '+', '/', ';', '=', /;, :=, =!=]",
		yyXError{35, -1}: "expected one of [&&, '!', ')', '*', '+', '/', '=', /;, :=, =!=]",
		yyXError{13, -1}: "expected one of [&&, '!', '*', '+', ',', '/', '=', ']', '}', /;, :=, =!=]",
		yyXError{33, -1}: "expected one of [&&, '!', '*', '+', ',', '/', '=', ']', '}', /;, :=, =!=]",
		yyXError{39, -1}: "expected one of [',', ']']",
		yyXError{12, -1}: "expected one of [',', '}']",
		yyXError{41, -1}: "expected one of ['=', ::]",
		yyXError{42, -1}: "expected one of ['=', ::]",
		yyXError{43, -1}: "expected one of ['=', ::]",
	}

	yyParseTab = [51][]uint8{
		// 0
		{15: 32, 35, 36, 37, 38, 30, 31, 33, 34, 28: 29},
		{11: 28},
		{50, 46, 47, 48, 5: 49, 7: 43, 44, 45, 42, 27, 14: 78},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24: 65, 27: 66},
		// 5
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
		{15: 32, 35, 36, 37, 38, 63, 31, 33, 34},
		{15: 32, 35, 36, 37, 38, 62, 31, 33, 34},
		// 10
		{6: 39, 15: 32, 35, 36, 37, 38, 41, 31, 33, 34, 25: 40},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		{4: 60, 6: 59},
		{50, 46, 47, 48, 4, 49, 4, 43, 44, 45, 42, 12: 4},
		{15: 32, 35, 36, 37, 38, 58, 31, 33, 34},
		// 15
		{15: 32, 35, 36, 37, 38, 57, 31, 33, 34},
		{15: 32, 35, 36, 37, 38, 56, 31, 33, 34},
		{15: 32, 35, 36, 37, 38, 55, 31, 33, 34},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{15: 32, 35, 36, 37, 38, 54, 31, 33, 34},
		// 20
		{15: 32, 35, 36, 37, 38, 53, 31, 33, 34},
		{15: 32, 35, 36, 37, 38, 52, 31, 33, 34},
		{15: 32, 35, 36, 37, 38, 51, 31, 33, 34},
		{50, 5, 5, 5, 5, 5, 5, 5, 5, 45, 5, 5, 5, 5, 5},
		{50, 46, 6, 6, 6, 6, 6, 6, 6, 45, 6, 6, 6, 6, 6},
		// 25
		{50, 46, 47, 7, 7, 49, 7, 7, 7, 45, 7, 7, 7, 7, 7},
		{50, 46, 8, 8, 8, 8, 8, 8, 8, 45, 8, 8, 8, 8, 8},
		{50, 10, 10, 10, 10, 10, 10, 10, 10, 45, 10, 10, 10, 10, 10},
		{50, 46, 47, 48, 11, 49, 11, 43, 11, 45, 42, 11, 11, 11, 11},
		{50, 46, 47, 48, 12, 49, 12, 12, 12, 45, 12, 12, 12, 12, 12},
		// 30
		{50, 46, 47, 48, 13, 49, 13, 43, 13, 45, 13, 13, 13, 13, 13},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		{15: 32, 35, 36, 37, 38, 61, 31, 33, 34},
		{50, 46, 47, 48, 3, 49, 3, 43, 44, 45, 42, 12: 3},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		// 35
		{50, 46, 47, 48, 5: 49, 7: 43, 44, 45, 42, 13: 64},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17},
		{15: 70, 71, 26: 69},
		{15: 32, 35, 36, 37, 38, 41, 31, 33, 34, 25: 67},
		{4: 60, 12: 68},
		// 40
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
		{73, 24: 72},
		{2, 24: 2},
		{1, 24: 1},
		{15: 70, 71, 26: 75},
		// 45
		{15: 32, 35, 36, 37, 38, 74, 31, 33, 34},
		{50, 22, 22, 22, 22, 22, 22, 22, 22, 45, 22, 22, 22, 22, 22},
		{76},
		{15: 32, 35, 36, 37, 38, 77, 31, 33, 34},
		{50, 23, 23, 23, 23, 23, 23, 23, 23, 45, 23, 23, 23, 23, 23},
		// 50
		{11: 26},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("'%c'", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 30

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.Node = &Start{
				Expr: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 2:
		{
			yyVAL.Node = &Start{
				Case:  1,
				Expr:  yyS[yypt-1].Node.(*Expr),
				Token: yyS[yypt-0].Token,
			}
		}
	case 3:
		{
			yyVAL.Node = &Expr{
				Token: yyS[yypt-0].Token,
			}
		}
	case 4:
		{
			yyVAL.Node = &Expr{
				Case:  1,
				Token: yyS[yypt-0].Token,
			}
		}
	case 5:
		{
			yyVAL.Node = &Expr{
				Case:   2,
				Token:  yyS[yypt-6].Token,
				Token2: yyS[yypt-5].Token,
				Tag:    yyS[yypt-4].Node.(*Tag),
				Token3: yyS[yypt-3].Token,
				Tag2:   yyS[yypt-2].Node.(*Tag),
				Token4: yyS[yypt-1].Token,
				Expr:   yyS[yypt-0].Node.(*Expr),
			}
		}
	case 6:
		{
			yyVAL.Node = &Expr{
				Case:   3,
				Token:  yyS[yypt-4].Token,
				Token2: yyS[yypt-3].Token,
				Tag:    yyS[yypt-2].Node.(*Tag),
				Token3: yyS[yypt-1].Token,
				Expr:   yyS[yypt-0].Node.(*Expr),
			}
		}
	case 7:
		{
			yyVAL.Node = &Expr{
				Case:     4,
				Token:    yyS[yypt-3].Token,
				Token2:   yyS[yypt-2].Token,
				ExprList: yyS[yypt-1].Node.(*ExprList).reverse(),
				Token3:   yyS[yypt-0].Token,
			}
		}
	case 8:
		{
			yyVAL.Node = &Expr{
				Case:  5,
				Token: yyS[yypt-0].Token,
			}
		}
	case 9:
		{
			yyVAL.Node = &Expr{
				Case:  6,
				Token: yyS[yypt-0].Token,
			}
		}
	case 10:
		{
			yyVAL.Node = &Expr{
				Case:  7,
				Token: yyS[yypt-0].Token,
			}
		}
	case 11:
		{
			yyVAL.Node = &Expr{
				Case:   8,
				Token:  yyS[yypt-2].Token,
				Expr:   yyS[yypt-1].Node.(*Expr),
				Token2: yyS[yypt-0].Token,
			}
		}
	case 12:
		{
			yyVAL.Node = &Expr{
				Case:  9,
				Token: yyS[yypt-1].Token,
				Expr:  yyS[yypt-0].Node.(*Expr),
			}
		}
	case 13:
		{
			yyVAL.Node = &Expr{
				Case:   10,
				Token:  yyS[yypt-1].Token,
				Token2: yyS[yypt-0].Token,
			}
		}
	case 14:
		{
			yyVAL.Node = &Expr{
				Case:     11,
				Token:    yyS[yypt-2].Token,
				ExprList: yyS[yypt-1].Node.(*ExprList).reverse(),
				Token2:   yyS[yypt-0].Token,
			}
		}
	case 15:
		{
			yyVAL.Node = &Expr{
				Case:  12,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 16:
		{
			yyVAL.Node = &Expr{
				Case:  13,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 17:
		{
			yyVAL.Node = &Expr{
				Case:  14,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 18:
		{
			yyVAL.Node = &Expr{
				Case:  15,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 19:
		{
			yyVAL.Node = &Expr{
				Case:  16,
				Expr:  yyS[yypt-1].Node.(*Expr),
				Token: yyS[yypt-0].Token,
			}
		}
	case 20:
		{
			yyVAL.Node = &Expr{
				Case:  17,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 21:
		{
			yyVAL.Node = &Expr{
				Case:  18,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 22:
		{
			yyVAL.Node = &Expr{
				Case:  19,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 23:
		{
			yyVAL.Node = &Expr{
				Case:  20,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 24:
		{
			yyVAL.Node = &ExprList{
				Expr: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 25:
		{
			yyVAL.Node = &ExprList{
				Case:     1,
				ExprList: yyS[yypt-2].Node.(*ExprList),
				Token:    yyS[yypt-1].Token,
				Expr:     yyS[yypt-0].Node.(*Expr),
			}
		}
	case 26:
		{
			yyVAL.Node = &Tag{
				Token: yyS[yypt-0].Token,
			}
		}
	case 27:
		{
			yyVAL.Node = &Tag{
				Case:  1,
				Token: yyS[yypt-0].Token,
			}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
