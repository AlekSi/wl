// Code generated by goyacc - DO NOT EDIT.

// Copyright 2017 The WL Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package wl

import __yyfmt__ "fmt"

type yySymType struct {
	yys   int
	Node  Node
	Token Token
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault   = 57367
	yyEofCode   = 57344
	AND         = 57346
	APPLY       = 57347
	CONDITION   = 57348
	EQUAL       = 57349
	FLOAT       = 57350
	GEQ         = 57351
	IDENTIFIER  = 57352
	INT         = 57353
	LEQ         = 57354
	MAP         = 57355
	MAPALL      = 57356
	MESSAGE     = 57357
	PATTERN     = 57358
	REPLACEALL  = 57359
	RULE        = 57360
	SAME        = 57361
	SET_DELAYED = 57362
	SLOT        = 57363
	STRING      = 57364
	UNARY       = 57365
	UNSAME      = 57366
	yyErrCode   = 57345

	yyMaxDepth = 200
	yyTabOfs   = -48
)

var (
	yyFollow = [][]int{
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57371, 57373}, // state 0
		{57344}, // state 1
		{57344, 33, 42, 43, 45, 47, 59, 60, 61, 62, 63, 94, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                                                      // state 2
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 91, 93, 94, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57358, 57359, 57360, 57361, 57362, 57363, 57364, 57366},               // state 3
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 91, 93, 94, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57357, 57358, 57359, 57360, 57361, 57362, 57363, 57364, 57366},        // state 4
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 91, 93, 94, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57358, 57359, 57360, 57361, 57362, 57363, 57364, 57366},               // state 5
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 91, 93, 94, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57358, 57359, 57360, 57361, 57362, 57363, 57364, 57366},               // state 6
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 91, 93, 94, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57358, 57359, 57360, 57361, 57362, 57363, 57364, 57366},               // state 7
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                                        // state 8
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 91, 93, 94, 125, 57346, 57347, 57348, 57349, 57350, 57370, 57351, 57352, 57353, 57354, 57355, 57356, 57358, 57359, 57360, 57361, 57362, 57363, 57364, 57373, 57366}, // state 9
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 91, 93, 94, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57358, 57359, 57360, 57361, 57362, 57363, 57364, 57366},               // state 10
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                                        // state 11
		{40, 45, 123, 125, 57368, 57369, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                            // state 12
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                                     // state 13
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                                     // state 14
		{44, 125}, // state 15
		{33, 42, 43, 44, 45, 47, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                                      // state 16
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                          // state 17
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                          // state 18
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                          // state 19
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                          // state 20
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                          // state 21
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                          // state 22
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                          // state 23
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                          // state 24
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                          // state 25
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                          // state 26
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                          // state 27
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                          // state 28
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                          // state 29
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 30
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                          // state 31
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                          // state 32
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                          // state 33
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                          // state 34
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                          // state 35
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                          // state 36
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                          // state 37
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                          // state 38
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                          // state 39
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 40
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 41
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 42
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 43
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 44
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 45
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 46
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 47
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 48
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 49
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 50
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 51
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 52
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 53
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 54
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 55
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 56
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 57
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 58
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 59
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 60
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 61
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 62
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                                          // state 63
		{33, 42, 43, 44, 45, 47, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                                      // state 64
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 65
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 91, 93, 94, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57358, 57359, 57360, 57361, 57362, 57363, 57364, 57366}, // state 66
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 91, 93, 94, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57358, 57359, 57360, 57361, 57362, 57363, 57364, 57366}, // state 67
		{40, 45, 93, 123, 57368, 57369, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                                                               // state 68
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                       // state 69
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 91, 93, 94, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57358, 57359, 57360, 57361, 57362, 57363, 57364, 57366}, // state 70
		{44, 93}, // state 71
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 91, 93, 94, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57358, 57359, 57360, 57361, 57362, 57363, 57364, 57366}, // state 72
		{33, 41, 42, 43, 45, 47, 60, 61, 62, 63, 94, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366},                                                                               // state 73
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 91, 93, 94, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57358, 57359, 57360, 57361, 57362, 57363, 57364, 57366}, // state 74
		{57352, 57364, 57372},                                                                                                                                           // state 75
		{61, 57357},                                                                                                                                                     // state 76
		{61, 57357},                                                                                                                                                     // state 77
		{61, 57357},                                                                                                                                                     // state 78
		{57352, 57364, 57372},                                                                                                                                           // state 79
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                    // state 80
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366}, // state 81
		{61}, // state 82
		{40, 45, 123, 57368, 57350, 57370, 57352, 57353, 57358, 57363, 57364, 57373},                                                                                    // state 83
		{57344, 33, 41, 42, 43, 44, 45, 47, 59, 60, 61, 62, 63, 93, 94, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57355, 57356, 57359, 57360, 57361, 57362, 57366}, // state 84
		{57344}, // state 85
	}

	yyXLAT = map[int]int{
		45:    0,  // '-' (76x)
		61:    1,  // '=' (50x)
		33:    2,  // '!' (46x)
		42:    3,  // '*' (46x)
		43:    4,  // '+' (46x)
		44:    5,  // ',' (46x)
		47:    6,  // '/' (46x)
		60:    7,  // '<' (46x)
		62:    8,  // '>' (46x)
		63:    9,  // '?' (46x)
		93:    10, // ']' (46x)
		94:    11, // '^' (46x)
		125:   12, // '}' (46x)
		57346: 13, // AND (46x)
		57347: 14, // APPLY (46x)
		57348: 15, // CONDITION (46x)
		57349: 16, // EQUAL (46x)
		57351: 17, // GEQ (46x)
		57354: 18, // LEQ (46x)
		57355: 19, // MAP (46x)
		57356: 20, // MAPALL (46x)
		57359: 21, // REPLACEALL (46x)
		57360: 22, // RULE (46x)
		57361: 23, // SAME (46x)
		57362: 24, // SET_DELAYED (46x)
		57366: 25, // UNSAME (46x)
		57344: 26, // $end (45x)
		57352: 27, // IDENTIFIER (44x)
		57364: 28, // STRING (44x)
		41:    29, // ')' (43x)
		59:    30, // ';' (43x)
		40:    31, // '(' (42x)
		57350: 32, // FLOAT (42x)
		57353: 33, // INT (42x)
		57358: 34, // PATTERN (42x)
		57363: 35, // SLOT (42x)
		57370: 36, // Factor (31x)
		57373: 37, // Term (31x)
		123:   38, // '{' (30x)
		57368: 39, // Expr (30x)
		38:    40, // '&' (12x)
		91:    41, // '[' (12x)
		57357: 42, // MESSAGE (4x)
		57369: 43, // ExprList (2x)
		57372: 44, // Tag (2x)
		57371: 45, // Start (1x)
		57367: 46, // $default (0x)
		57345: 47, // error (0x)
		57365: 48, // UNARY (0x)
	}

	yySymNames = []string{
		"'-'",
		"'='",
		"'!'",
		"'*'",
		"'+'",
		"','",
		"'/'",
		"'<'",
		"'>'",
		"'?'",
		"']'",
		"'^'",
		"'}'",
		"AND",
		"APPLY",
		"CONDITION",
		"EQUAL",
		"GEQ",
		"LEQ",
		"MAP",
		"MAPALL",
		"REPLACEALL",
		"RULE",
		"SAME",
		"SET_DELAYED",
		"UNSAME",
		"$end",
		"IDENTIFIER",
		"STRING",
		"')'",
		"';'",
		"'('",
		"FLOAT",
		"INT",
		"PATTERN",
		"SLOT",
		"Factor",
		"Term",
		"'{'",
		"Expr",
		"'&'",
		"'['",
		"MESSAGE",
		"ExprList",
		"Tag",
		"Start",
		"$default",
		"error",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{
		57346: "&&",
		57347: "@@",
		57348: "/;",
		57349: "==",
		57351: ">=",
		57354: "<=",
		57355: "/@",
		57356: "//",
		57359: "/.",
		57360: "->",
		57361: "===",
		57362: ":=",
		57366: "=!=",
		57352: "identifier",
		57364: "string literal",
		57350: "floating point literal",
		57353: "integer literal",
		57358: "pattern",
		57363: "#",
		57357: "::",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {45, 1},
		2:  {45, 2},
		3:  {37, 1},
		4:  {37, 1},
		5:  {37, 1},
		6:  {37, 1},
		7:  {37, 1},
		8:  {37, 3},
		9:  {37, 2},
		10: {37, 3},
		11: {37, 4},
		12: {37, 1},
		13: {36, 1},
		14: {36, 2},
		15: {39, 7},
		16: {39, 5},
		17: {39, 2},
		18: {39, 2},
		19: {39, 3},
		20: {39, 3},
		21: {39, 3},
		22: {39, 3},
		23: {39, 3},
		24: {39, 3},
		25: {39, 3},
		26: {39, 3},
		27: {39, 3},
		28: {39, 3},
		29: {39, 3},
		30: {39, 3},
		31: {39, 3},
		32: {39, 3},
		33: {39, 2},
		34: {39, 3},
		35: {39, 3},
		36: {39, 3},
		37: {39, 3},
		38: {39, 3},
		39: {39, 3},
		40: {39, 3},
		41: {39, 3},
		42: {39, 3},
		43: {39, 1},
		44: {43, 1},
		45: {43, 3},
		46: {44, 1},
		47: {44, 1},
	}

	yyXErrors = map[yyXError]string{
		{0, 26}:  "invalid empty input",
		{1, -1}:  "expected $end",
		{85, -1}: "expected $end",
		{82, -1}: "expected '='",
		{8, -1}:  "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{11, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{17, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{18, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{19, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{20, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{21, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{22, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{23, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{24, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{25, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{26, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{27, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{28, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{29, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{31, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{32, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{33, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{34, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{35, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{36, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{37, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{38, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{39, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{63, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{80, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{83, -1}: "expected Expr or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{68, -1}: "expected ExprList or one of [#, '(', '-', ']', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{12, -1}: "expected ExprList or one of [#, '(', '-', '{', '}', floating point literal, identifier, integer literal, pattern, string literal]",
		{9, -1}:  "expected Factor or one of [#, $end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', '[', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@, floating point literal, identifier, integer literal, pattern, string literal]",
		{0, -1}:  "expected Start or one of [#, '(', '-', '{', floating point literal, identifier, integer literal, pattern, string literal]",
		{75, -1}: "expected Tag or one of [identifier, string literal]",
		{79, -1}: "expected Tag or one of [identifier, string literal]",
		{4, -1}:  "expected one of [#, $end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', '[', ']', '^', '}', ->, /., //, /;, /@, ::, :=, <=, =!=, ==, ===, >=, @@, floating point literal, identifier, integer literal, pattern, string literal]",
		{3, -1}:  "expected one of [#, $end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', '[', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@, floating point literal, identifier, integer literal, pattern, string literal]",
		{5, -1}:  "expected one of [#, $end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', '[', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@, floating point literal, identifier, integer literal, pattern, string literal]",
		{6, -1}:  "expected one of [#, $end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', '[', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@, floating point literal, identifier, integer literal, pattern, string literal]",
		{7, -1}:  "expected one of [#, $end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', '[', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@, floating point literal, identifier, integer literal, pattern, string literal]",
		{10, -1}: "expected one of [#, $end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', '[', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@, floating point literal, identifier, integer literal, pattern, string literal]",
		{66, -1}: "expected one of [#, $end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', '[', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@, floating point literal, identifier, integer literal, pattern, string literal]",
		{67, -1}: "expected one of [#, $end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', '[', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@, floating point literal, identifier, integer literal, pattern, string literal]",
		{70, -1}: "expected one of [#, $end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', '[', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@, floating point literal, identifier, integer literal, pattern, string literal]",
		{72, -1}: "expected one of [#, $end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', '[', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@, floating point literal, identifier, integer literal, pattern, string literal]",
		{74, -1}: "expected one of [#, $end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', '[', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@, floating point literal, identifier, integer literal, pattern, string literal]",
		{13, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{14, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{30, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{40, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{41, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{42, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{43, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{44, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{45, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{46, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{47, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{48, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{49, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{50, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{51, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{52, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{53, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{54, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{55, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{56, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{57, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{58, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{59, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{60, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{61, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{62, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{65, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{69, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{81, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{84, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '/', ';', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{2, -1}:  "expected one of [$end, &&, '!', '*', '+', '-', '/', ';', '<', '=', '>', '?', '^', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{73, -1}: "expected one of [&&, '!', ')', '*', '+', '-', '/', '<', '=', '>', '?', '^', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{16, -1}: "expected one of [&&, '!', '*', '+', ',', '-', '/', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{64, -1}: "expected one of [&&, '!', '*', '+', ',', '-', '/', '<', '=', '>', '?', ']', '^', '}', ->, /., //, /;, /@, :=, <=, =!=, ==, ===, >=, @@]",
		{71, -1}: "expected one of [',', ']']",
		{15, -1}: "expected one of [',', '}']",
		{76, -1}: "expected one of ['=', ::]",
		{77, -1}: "expected one of ['=', ::]",
		{78, -1}: "expected one of ['=', ::]",
	}

	yyParseTab = [86][]uint16{
		// 0
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 50, 45: 49},
		{26: 48},
		{81, 84, 78, 79, 80, 6: 82, 83, 85, 86, 11: 87, 13: 65, 77, 69, 74, 76, 72, 70, 68, 67, 66, 75, 71, 73, 47, 30: 133},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 40: 45, 45},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 40: 44, 44, 123},
		// 5
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 40: 43, 43},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 40: 42, 42},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 40: 41, 41},
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 121},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 114, 55, 35, 35, 56, 58, 53, 54, 51, 117, 57, 40: 115, 116},
		// 10
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 40: 36, 36},
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 113},
		{59, 12: 62, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 64, 43: 63},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 29: 5, 5},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 29: 30, 30},
		// 15
		{5: 111, 12: 110},
		{81, 84, 78, 79, 80, 4, 82, 83, 85, 86, 4, 87, 4, 65, 77, 69, 74, 76, 72, 70, 68, 67, 66, 75, 71, 73},
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 109},
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 108},
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 107},
		// 20
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 106},
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 105},
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 104},
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 103},
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 102},
		// 25
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 101},
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 100},
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 99},
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 98},
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 97},
		// 30
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 29: 15, 15},
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 96},
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 95},
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 94},
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 93},
		// 35
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 92},
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 91},
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 90},
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 89},
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 88},
		// 40
		{6, 6, 78, 6, 6, 6, 6, 6, 6, 86, 6, 87, 6, 6, 77, 6, 6, 6, 6, 70, 68, 6, 6, 6, 6, 6, 6, 29: 6, 6},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 29: 7, 7},
		{81, 8, 78, 79, 80, 8, 82, 8, 8, 86, 8, 87, 8, 8, 77, 8, 74, 8, 8, 70, 68, 8, 8, 8, 8, 8, 8, 29: 8, 8},
		{81, 9, 78, 79, 80, 9, 82, 83, 85, 86, 9, 87, 9, 65, 77, 69, 74, 76, 72, 70, 68, 67, 66, 75, 9, 73, 9, 29: 9, 9},
		{81, 10, 78, 79, 80, 10, 82, 10, 85, 86, 10, 87, 10, 10, 77, 10, 74, 76, 10, 70, 68, 10, 10, 10, 10, 10, 10, 29: 10, 10},
		// 45
		{11, 11, 78, 11, 11, 11, 11, 11, 11, 86, 11, 87, 11, 11, 77, 11, 11, 11, 11, 70, 68, 11, 11, 11, 11, 11, 11, 29: 11, 11},
		{12, 12, 78, 79, 80, 12, 82, 12, 12, 86, 12, 87, 12, 12, 77, 12, 12, 12, 12, 70, 68, 12, 12, 12, 12, 12, 12, 29: 12, 12},
		{13, 13, 78, 79, 13, 13, 82, 13, 13, 86, 13, 87, 13, 13, 77, 13, 13, 13, 13, 70, 68, 13, 13, 13, 13, 13, 13, 29: 13, 13},
		{14, 14, 78, 14, 14, 14, 82, 14, 14, 86, 14, 87, 14, 14, 77, 14, 14, 14, 14, 70, 68, 14, 14, 14, 14, 14, 14, 29: 14, 14},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 86, 16, 16, 16, 16, 16, 16, 16, 16, 16, 70, 68, 16, 16, 16, 16, 16, 16, 29: 16, 16},
		// 50
		{81, 17, 78, 79, 80, 17, 82, 17, 85, 86, 17, 87, 17, 17, 77, 17, 74, 17, 17, 70, 68, 17, 17, 17, 17, 17, 17, 29: 17, 17},
		{81, 18, 78, 79, 80, 18, 82, 83, 85, 86, 18, 87, 18, 18, 77, 18, 74, 76, 72, 70, 68, 18, 18, 18, 18, 18, 18, 29: 18, 18},
		{81, 19, 78, 79, 80, 19, 82, 19, 19, 86, 19, 87, 19, 19, 77, 19, 19, 19, 19, 70, 68, 19, 19, 19, 19, 19, 19, 29: 19, 19},
		{81, 20, 78, 79, 80, 20, 82, 83, 85, 86, 20, 87, 20, 20, 77, 20, 74, 76, 72, 70, 68, 20, 20, 75, 20, 20, 20, 29: 20, 20},
		{81, 21, 78, 79, 80, 21, 82, 83, 85, 86, 21, 87, 21, 21, 77, 21, 74, 76, 21, 70, 68, 21, 21, 21, 21, 21, 21, 29: 21, 21},
		// 55
		{81, 22, 78, 79, 80, 22, 82, 83, 85, 86, 22, 87, 22, 65, 77, 69, 74, 76, 72, 70, 68, 67, 66, 75, 22, 73, 22, 29: 22, 22},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 86, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 29: 23, 23},
		{81, 24, 78, 79, 80, 24, 82, 83, 85, 86, 24, 87, 24, 65, 77, 24, 74, 76, 72, 70, 68, 24, 24, 75, 24, 73, 24, 29: 24, 24},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 86, 25, 25, 25, 25, 25, 25, 25, 25, 25, 70, 25, 25, 25, 25, 25, 25, 25, 29: 25, 25},
		{81, 26, 78, 79, 80, 26, 82, 83, 85, 86, 26, 87, 26, 65, 77, 69, 74, 76, 72, 70, 68, 26, 66, 75, 26, 73, 26, 29: 26, 26},
		// 60
		{81, 27, 78, 79, 80, 27, 82, 83, 85, 86, 27, 87, 27, 65, 77, 69, 74, 76, 72, 70, 68, 27, 27, 75, 27, 73, 27, 29: 27, 27},
		{81, 28, 78, 79, 80, 28, 82, 83, 85, 86, 28, 87, 28, 28, 77, 28, 74, 76, 72, 70, 68, 28, 28, 75, 28, 73, 28, 29: 28, 28},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29: 29, 29},
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 112},
		{81, 84, 78, 79, 80, 3, 82, 83, 85, 86, 3, 87, 3, 65, 77, 69, 74, 76, 72, 70, 68, 67, 66, 75, 71, 73},
		// 65
		{31, 31, 78, 31, 31, 31, 31, 31, 31, 86, 31, 87, 31, 31, 77, 31, 31, 31, 31, 70, 68, 31, 31, 31, 31, 31, 31, 29: 31, 31},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 40: 44, 44},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40: 39, 39},
		{59, 10: 118, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 64, 43: 119},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 29: 34, 34},
		// 70
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 40: 38, 38},
		{5: 111, 10: 120},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 40: 37, 37},
		{81, 84, 78, 79, 80, 6: 82, 83, 85, 86, 11: 87, 13: 65, 77, 69, 74, 76, 72, 70, 68, 67, 66, 75, 71, 73, 29: 122},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40: 40, 40},
		// 75
		{27: 125, 126, 44: 124},
		{1: 128, 42: 127},
		{1: 2, 42: 2},
		{1: 1, 42: 1},
		{27: 125, 126, 44: 130},
		// 80
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 129},
		{81, 32, 78, 79, 80, 32, 82, 83, 85, 86, 32, 87, 32, 65, 77, 69, 74, 76, 72, 70, 68, 67, 66, 75, 32, 73, 32, 29: 32, 32},
		{1: 131},
		{59, 27: 52, 55, 31: 56, 58, 53, 54, 51, 61, 57, 60, 132},
		{81, 33, 78, 79, 80, 33, 82, 83, 85, 86, 33, 87, 33, 65, 77, 69, 74, 76, 72, 70, 68, 67, 66, 75, 33, 73, 33, 29: 33, 33},
		// 85
		{26: 46},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("'%c'", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 47

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.Node = &Start{
				Expr: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 2:
		{
			yyVAL.Node = &Start{
				Case:  1,
				Expr:  yyS[yypt-1].Node.(*Expr),
				Token: yyS[yypt-0].Token,
			}
		}
	case 3:
		{
			yyVAL.Node = &Term{
				Token: yyS[yypt-0].Token,
			}
		}
	case 4:
		{
			yyVAL.Node = &Term{
				Case:  1,
				Token: yyS[yypt-0].Token,
			}
		}
	case 5:
		{
			yyVAL.Node = &Term{
				Case:  2,
				Token: yyS[yypt-0].Token,
			}
		}
	case 6:
		{
			yyVAL.Node = &Term{
				Case:  3,
				Token: yyS[yypt-0].Token,
			}
		}
	case 7:
		{
			yyVAL.Node = &Term{
				Case:  4,
				Token: yyS[yypt-0].Token,
			}
		}
	case 8:
		{
			yyVAL.Node = &Term{
				Case:   5,
				Token:  yyS[yypt-2].Token,
				Expr:   yyS[yypt-1].Node.(*Expr),
				Token2: yyS[yypt-0].Token,
			}
		}
	case 9:
		{
			yyVAL.Node = &Term{
				Case:  6,
				Term:  yyS[yypt-1].Node.(*Term),
				Token: yyS[yypt-0].Token,
			}
		}
	case 10:
		{
			yyVAL.Node = &Term{
				Case:   7,
				Term:   yyS[yypt-2].Node.(*Term),
				Token:  yyS[yypt-1].Token,
				Token2: yyS[yypt-0].Token,
			}
		}
	case 11:
		{
			yyVAL.Node = &Term{
				Case:     8,
				Term:     yyS[yypt-3].Node.(*Term),
				Token:    yyS[yypt-2].Token,
				ExprList: yyS[yypt-1].Node.(*ExprList).reverse(),
				Token2:   yyS[yypt-0].Token,
			}
		}
	case 12:
		{
			yyVAL.Node = &Term{
				Case:  9,
				Token: yyS[yypt-0].Token,
			}
		}
	case 13:
		{
			yyVAL.Node = &Factor{
				Term: yyS[yypt-0].Node.(*Term),
			}
		}
	case 14:
		{
			yyVAL.Node = &Factor{
				Case:   1,
				Term:   yyS[yypt-1].Node.(*Term),
				Factor: yyS[yypt-0].Node.(*Factor),
			}
		}
	case 15:
		{
			yyVAL.Node = &Expr{
				Token:  yyS[yypt-6].Token,
				Token2: yyS[yypt-5].Token,
				Tag:    yyS[yypt-4].Node.(*Tag),
				Token3: yyS[yypt-3].Token,
				Tag2:   yyS[yypt-2].Node.(*Tag),
				Token4: yyS[yypt-1].Token,
				Expr:   yyS[yypt-0].Node.(*Expr),
			}
		}
	case 16:
		{
			yyVAL.Node = &Expr{
				Case:   1,
				Token:  yyS[yypt-4].Token,
				Token2: yyS[yypt-3].Token,
				Tag:    yyS[yypt-2].Node.(*Tag),
				Token3: yyS[yypt-1].Token,
				Expr:   yyS[yypt-0].Node.(*Expr),
			}
		}
	case 17:
		{
			yyVAL.Node = &Expr{
				Case:  2,
				Token: yyS[yypt-1].Token,
				Expr:  yyS[yypt-0].Node.(*Expr),
			}
		}
	case 18:
		{
			yyVAL.Node = &Expr{
				Case:   3,
				Token:  yyS[yypt-1].Token,
				Token2: yyS[yypt-0].Token,
			}
		}
	case 19:
		{
			yyVAL.Node = &Expr{
				Case:     4,
				Token:    yyS[yypt-2].Token,
				ExprList: yyS[yypt-1].Node.(*ExprList).reverse(),
				Token2:   yyS[yypt-0].Token,
			}
		}
	case 20:
		{
			yyVAL.Node = &Expr{
				Case:  5,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 21:
		{
			yyVAL.Node = &Expr{
				Case:  6,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 22:
		{
			yyVAL.Node = &Expr{
				Case:  7,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 23:
		{
			yyVAL.Node = &Expr{
				Case:  8,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 24:
		{
			yyVAL.Node = &Expr{
				Case:  9,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 25:
		{
			yyVAL.Node = &Expr{
				Case:  10,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 26:
		{
			yyVAL.Node = &Expr{
				Case:  11,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 27:
		{
			yyVAL.Node = &Expr{
				Case:  12,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 28:
		{
			yyVAL.Node = &Expr{
				Case:  13,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 29:
		{
			yyVAL.Node = &Expr{
				Case:  14,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 30:
		{
			yyVAL.Node = &Expr{
				Case:  15,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 31:
		{
			yyVAL.Node = &Expr{
				Case:  16,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 32:
		{
			yyVAL.Node = &Expr{
				Case:  17,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 33:
		{
			yyVAL.Node = &Expr{
				Case:  18,
				Expr:  yyS[yypt-1].Node.(*Expr),
				Token: yyS[yypt-0].Token,
			}
		}
	case 34:
		{
			yyVAL.Node = &Expr{
				Case:  19,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 35:
		{
			yyVAL.Node = &Expr{
				Case:  20,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 36:
		{
			yyVAL.Node = &Expr{
				Case:  21,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 37:
		{
			yyVAL.Node = &Expr{
				Case:  22,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 38:
		{
			yyVAL.Node = &Expr{
				Case:  23,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 39:
		{
			yyVAL.Node = &Expr{
				Case:  24,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 40:
		{
			yyVAL.Node = &Expr{
				Case:  25,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 41:
		{
			yyVAL.Node = &Expr{
				Case:  26,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 42:
		{
			yyVAL.Node = &Expr{
				Case:  27,
				Expr:  yyS[yypt-2].Node.(*Expr),
				Token: yyS[yypt-1].Token,
				Expr2: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 43:
		{
			yyVAL.Node = &Expr{
				Case:   28,
				Factor: yyS[yypt-0].Node.(*Factor),
			}
		}
	case 44:
		{
			yyVAL.Node = &ExprList{
				Expr: yyS[yypt-0].Node.(*Expr),
			}
		}
	case 45:
		{
			yyVAL.Node = &ExprList{
				Case:     1,
				ExprList: yyS[yypt-2].Node.(*ExprList),
				Token:    yyS[yypt-1].Token,
				Expr:     yyS[yypt-0].Node.(*Expr),
			}
		}
	case 46:
		{
			yyVAL.Node = &Tag{
				Token: yyS[yypt-0].Token,
			}
		}
	case 47:
		{
			yyVAL.Node = &Tag{
				Case:  1,
				Token: yyS[yypt-0].Token,
			}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
