// Code generated by goyacc - DO NOT EDIT.

// Copyright 2017 The WL Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package wl

import __yyfmt__ "fmt"

type yySymType struct {
	yys   int
	Node  Node
	Token Token
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault         = 57387
	yyEofCode         = 57344
	AND               = 57346
	APPLY             = 57347
	APPLY_ALL         = 57348
	COMPOSITION       = 57349
	CONDITION         = 57350
	DEC               = 57351
	EQUAL             = 57352
	FACTORIAL         = 57353
	FLOAT             = 57354
	GEQ               = 57355
	GET               = 57356
	IDENT             = 57357
	IGNORE            = 57358
	INC               = 57359
	INT               = 57360
	LEQ               = 57361
	LPART             = 57362
	MAP               = 57363
	MAP_ALL           = 57364
	MESSAGE_NAME      = 57365
	NOPATTERN         = 57366
	OR                = 57367
	OVERSCRIPT        = 57368
	PATTERN           = 57369
	POSTFIX           = 57370
	PRE_INC           = 57371
	REPLACEALL        = 57372
	REPLACEREP        = 57373
	RIGHT_COMPOSITION = 57374
	RPART             = 57375
	RULE              = 57376
	RULEDELAYED       = 57377
	SAME              = 57378
	SET_DELAYED       = 57379
	SLOT              = 57380
	STRING            = 57381
	STRINGJOIN        = 57382
	SUBSCRIPT         = 57383
	UNARYMINUS        = 57384
	UNDERSCRIPT       = 57385
	UNSAME            = 57386
	yyErrCode         = 57345

	yyMaxDepth = 200
	yyTabOfs   = -77
)

var (
	yyFollow = [][]int{
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393, 57394}, // state 0
		{57344}, // state 1
		{57344, 33, 42, 43, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 94, 124, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                                  // state 2
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                            // state 3
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                            // state 4
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                            // state 5
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                            // state 6
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                          // state 7
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57354, 57355, 57356, 57357, 57359, 57360, 57361, 57362, 57363, 57364, 57367, 57368, 57369, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57380, 57381, 57382, 57383, 57385, 57386}, // state 8
		{57381}, // state 9
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                          // state 10
		{33, 40, 45, 123, 125, 57351, 57389, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                              // state 11
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57354, 57355, 57356, 57357, 57359, 57360, 57361, 57362, 57363, 57364, 57365, 57367, 57368, 57369, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57380, 57381, 57382, 57383, 57385, 57386},        // state 12
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57354, 57355, 57356, 57357, 57359, 57360, 57361, 57362, 57363, 57364, 57367, 57368, 57369, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57380, 57381, 57382, 57383, 57385, 57386},               // state 13
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57354, 57355, 57356, 57357, 57359, 57360, 57361, 57362, 57363, 57364, 57367, 57368, 57369, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57380, 57381, 57382, 57383, 57385, 57386},               // state 14
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57354, 57355, 57356, 57357, 57359, 57360, 57361, 57362, 57363, 57364, 57367, 57368, 57369, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57380, 57381, 57382, 57383, 57385, 57386},               // state 15
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57354, 57355, 57356, 57357, 57359, 57360, 57361, 57362, 57363, 57364, 57367, 57368, 57369, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57380, 57381, 57382, 57383, 57385, 57386},               // state 16
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57354, 57391, 57355, 57356, 57357, 57359, 57360, 57361, 57362, 57363, 57364, 57367, 57368, 57369, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57380, 57381, 57382, 57383, 57393, 57385, 57386}, // state 17
		{33, 40, 45, 123, 57351, 57389, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                   // state 18
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57354, 57355, 57356, 57357, 57359, 57360, 57361, 57362, 57363, 57364, 57367, 57368, 57369, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57380, 57381, 57382, 57383, 57385, 57386},               // state 19
		{33, 40, 45, 93, 123, 57351, 57389, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                               // state 20
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                        // state 21
		{33, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                                   // state 22
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57354, 57355, 57356, 57357, 57359, 57360, 57361, 57362, 57363, 57364, 57367, 57368, 57369, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57380, 57381, 57382, 57383, 57385, 57386},               // state 23
		{44, 93, 57388}, // state 24
		{93},            // state 25
		{33, 40, 45, 93, 123, 125, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57375, 57380, 57381, 57393},                                                                                                                                                                                                                                                  // state 26
		{33, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                           // state 27
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 28
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 29
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 30
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 31
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 32
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 33
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 34
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 35
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 36
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 37
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 38
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 39
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 40
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 41
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 42
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 43
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 44
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 45
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 46
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 47
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 48
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 49
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 50
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 51
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 52
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 53
		{57344, 33, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 123, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57390, 57354, 57391, 57355, 57356, 57357, 57359, 57360, 57361, 57363, 57364, 57367, 57368, 57369, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57380, 57381, 57382, 57383, 57393, 57385, 57386}, // state 54
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 55
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 56
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 57
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 58
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 59
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 60
		{57344, 33, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 123, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57390, 57354, 57391, 57355, 57356, 57357, 57359, 57360, 57361, 57363, 57364, 57367, 57368, 57369, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57380, 57381, 57382, 57383, 57393, 57385, 57386}, // state 61
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 62
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 63
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 64
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 65
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 66
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 67
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 68
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                                  // state 69
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 70
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 71
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 72
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 73
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 74
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 75
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 76
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 77
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 78
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 79
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 80
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 81
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 82
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 83
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 84
		{57344, 33, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 123, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57390, 57354, 57391, 57355, 57356, 57357, 57359, 57360, 57361, 57363, 57364, 57367, 57368, 57369, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57380, 57381, 57382, 57383, 57393, 57385, 57386}, // state 85
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 86
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 87
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 88
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 89
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 90
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 91
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 92
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 93
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 94
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 95
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 96
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 97
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 98
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 99
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 100
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 101
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 102
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 103
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 104
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 105
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 106
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 107
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 108
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 109
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 110
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                // state 111
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57354, 57355, 57356, 57357, 57359, 57360, 57361, 57362, 57363, 57364, 57367, 57368, 57369, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57380, 57381, 57382, 57383, 57385, 57386},       // state 112
		{44, 57388, 57375}, // state 113
		{57375},            // state 114
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57354, 57355, 57356, 57357, 57359, 57360, 57361, 57362, 57363, 57364, 57367, 57368, 57369, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57380, 57381, 57382, 57383, 57385, 57386}, // state 115
		{57357, 57381, 57392}, // state 116
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57354, 57355, 57356, 57357, 57359, 57360, 57361, 57362, 57363, 57364, 57365, 57367, 57368, 57369, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57380, 57381, 57382, 57383, 57385, 57386}, // state 117
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57354, 57355, 57356, 57357, 57359, 57360, 57361, 57362, 57363, 57364, 57365, 57367, 57368, 57369, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57380, 57381, 57382, 57383, 57385, 57386}, // state 118
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57354, 57355, 57356, 57357, 57359, 57360, 57361, 57362, 57363, 57364, 57365, 57367, 57368, 57369, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57380, 57381, 57382, 57383, 57385, 57386}, // state 119
		{57357, 57381, 57392}, // state 120
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57354, 57355, 57356, 57357, 57359, 57360, 57361, 57362, 57363, 57364, 57367, 57368, 57369, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57380, 57381, 57382, 57383, 57385, 57386}, // state 121
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57354, 57355, 57356, 57357, 57359, 57360, 57361, 57362, 57363, 57364, 57367, 57368, 57369, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57380, 57381, 57382, 57383, 57385, 57386}, // state 122
		{44, 125, 57388}, // state 123
		{125},            // state 124
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57354, 57355, 57356, 57357, 57359, 57360, 57361, 57362, 57363, 57364, 57367, 57368, 57369, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57380, 57381, 57382, 57383, 57385, 57386}, // state 125
		{33, 41, 42, 43, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 94, 124, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                                                     // state 126
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57354, 57355, 57356, 57357, 57359, 57360, 57361, 57362, 57363, 57364, 57367, 57368, 57369, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57380, 57381, 57382, 57383, 57385, 57386}, // state 127
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57354, 57355, 57356, 57357, 57359, 57360, 57361, 57362, 57363, 57364, 57367, 57368, 57369, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57380, 57381, 57382, 57383, 57385, 57386}, // state 128
		{33, 40, 45, 123, 57351, 57390, 57354, 57391, 57356, 57357, 57359, 57360, 57369, 57380, 57381, 57393},                                                                                                                                                                                                                                                            // state 129
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                          // state 130
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                          // state 131
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                          // state 132
		{57344, 33, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 126, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57355, 57359, 57361, 57363, 57364, 57367, 57368, 57370, 57372, 57373, 57374, 57375, 57376, 57377, 57378, 57379, 57382, 57383, 57385, 57386},                                                                          // state 133
	}

	yyXLAT = map[int]int{
		33:    0,  // '!' (124x)
		45:    1,  // '-' (124x)
		57351: 2,  // DEC (124x)
		57359: 3,  // INC (124x)
		93:    4,  // ']' (77x)
		125:   5,  // '}' (77x)
		44:    6,  // ',' (76x)
		57375: 7,  // RPART (76x)
		42:    8,  // '*' (75x)
		43:    9,  // '+' (75x)
		46:    10, // '.' (75x)
		47:    11, // '/' (75x)
		58:    12, // ':' (75x)
		59:    13, // ';' (75x)
		60:    14, // '<' (75x)
		61:    15, // '=' (75x)
		62:    16, // '>' (75x)
		63:    17, // '?' (75x)
		64:    18, // '@' (75x)
		94:    19, // '^' (75x)
		124:   20, // '|' (75x)
		126:   21, // '~' (75x)
		57346: 22, // AND (75x)
		57347: 23, // APPLY (75x)
		57348: 24, // APPLY_ALL (75x)
		57349: 25, // COMPOSITION (75x)
		57350: 26, // CONDITION (75x)
		57352: 27, // EQUAL (75x)
		57355: 28, // GEQ (75x)
		57361: 29, // LEQ (75x)
		57363: 30, // MAP (75x)
		57364: 31, // MAP_ALL (75x)
		57367: 32, // OR (75x)
		57368: 33, // OVERSCRIPT (75x)
		57370: 34, // POSTFIX (75x)
		57372: 35, // REPLACEALL (75x)
		57373: 36, // REPLACEREP (75x)
		57374: 37, // RIGHT_COMPOSITION (75x)
		57376: 38, // RULE (75x)
		57377: 39, // RULEDELAYED (75x)
		57378: 40, // SAME (75x)
		57379: 41, // SET_DELAYED (75x)
		57382: 42, // STRINGJOIN (75x)
		57383: 43, // SUBSCRIPT (75x)
		57385: 44, // UNDERSCRIPT (75x)
		57386: 45, // UNSAME (75x)
		57381: 46, // STRING (74x)
		57344: 47, // $end (73x)
		57357: 48, // IDENT (73x)
		41:    49, // ')' (72x)
		40:    50, // '(' (71x)
		123:   51, // '{' (71x)
		57354: 52, // FLOAT (71x)
		57356: 53, // GET (71x)
		57360: 54, // INT (71x)
		57369: 55, // PATTERN (71x)
		57380: 56, // SLOT (71x)
		57391: 57, // Factor (53x)
		57393: 58, // Term (53x)
		57390: 59, // Expression (52x)
		38:    60, // '&' (19x)
		91:    61, // '[' (19x)
		57362: 62, // LPART (19x)
		57365: 63, // MESSAGE_NAME (4x)
		57388: 64, // CommaOpt (3x)
		57389: 65, // ExprList (3x)
		57392: 66, // Tag (2x)
		57394: 67, // start (1x)
		57387: 68, // $default (0x)
		57345: 69, // error (0x)
		57353: 70, // FACTORIAL (0x)
		57358: 71, // IGNORE (0x)
		57366: 72, // NOPATTERN (0x)
		57371: 73, // PRE_INC (0x)
		57384: 74, // UNARYMINUS (0x)
	}

	yySymNames = []string{
		"'!'",
		"'-'",
		"DEC",
		"INC",
		"']'",
		"'}'",
		"','",
		"RPART",
		"'*'",
		"'+'",
		"'.'",
		"'/'",
		"':'",
		"';'",
		"'<'",
		"'='",
		"'>'",
		"'?'",
		"'@'",
		"'^'",
		"'|'",
		"'~'",
		"AND",
		"APPLY",
		"APPLY_ALL",
		"COMPOSITION",
		"CONDITION",
		"EQUAL",
		"GEQ",
		"LEQ",
		"MAP",
		"MAP_ALL",
		"OR",
		"OVERSCRIPT",
		"POSTFIX",
		"REPLACEALL",
		"REPLACEREP",
		"RIGHT_COMPOSITION",
		"RULE",
		"RULEDELAYED",
		"SAME",
		"SET_DELAYED",
		"STRINGJOIN",
		"SUBSCRIPT",
		"UNDERSCRIPT",
		"UNSAME",
		"STRING",
		"$end",
		"IDENT",
		"')'",
		"'('",
		"'{'",
		"FLOAT",
		"GET",
		"INT",
		"PATTERN",
		"SLOT",
		"Factor",
		"Term",
		"Expression",
		"'&'",
		"'['",
		"LPART",
		"MESSAGE_NAME",
		"CommaOpt",
		"ExprList",
		"Tag",
		"start",
		"$default",
		"error",
		"FACTORIAL",
		"IGNORE",
		"NOPATTERN",
		"PRE_INC",
		"UNARYMINUS",
	}

	yyTokenLiteralStrings = map[int]string{
		57351: "--",
		57359: "++",
		57375: "]]",
		57346: "&&",
		57347: "@@",
		57348: "@@@",
		57349: "@*",
		57350: "/;",
		57352: "==",
		57355: ">=",
		57361: "<=",
		57363: "/@",
		57364: "//@",
		57367: "||",
		57368: "\\&",
		57370: "//",
		57372: "/.",
		57373: "//.",
		57374: "/*",
		57376: "->",
		57377: ":>",
		57378: "===",
		57379: ":=",
		57382: "<>",
		57383: "\\_",
		57385: "\\+",
		57386: "=!=",
		57381: "string",
		57357: "identifier",
		57354: "real",
		57356: "<<",
		57360: "integer",
		57369: "pattern",
		57380: "slot",
		57362: "[[",
		57365: "::",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {67, 1},
		2:  {59, 2},
		3:  {59, 2},
		4:  {59, 2},
		5:  {59, 2},
		6:  {59, 3},
		7:  {59, 2},
		8:  {59, 2},
		9:  {59, 3},
		10: {59, 3},
		11: {59, 3},
		12: {59, 3},
		13: {59, 3},
		14: {59, 3},
		15: {59, 3},
		16: {59, 3},
		17: {59, 3},
		18: {59, 3},
		19: {59, 3},
		20: {59, 3},
		21: {59, 3},
		22: {59, 3},
		23: {59, 3},
		24: {59, 3},
		25: {59, 3},
		26: {59, 3},
		27: {59, 3},
		28: {59, 3},
		29: {59, 3},
		30: {59, 3},
		31: {59, 3},
		32: {59, 3},
		33: {59, 2},
		34: {59, 3},
		35: {59, 3},
		36: {59, 3},
		37: {59, 3},
		38: {59, 3},
		39: {59, 3},
		40: {59, 3},
		41: {59, 2},
		42: {59, 3},
		43: {59, 3},
		44: {59, 3},
		45: {59, 3},
		46: {59, 3},
		47: {59, 3},
		48: {59, 3},
		49: {59, 3},
		50: {59, 3},
		51: {59, 1},
		52: {59, 3},
		53: {58, 1},
		54: {58, 2},
		55: {58, 3},
		56: {58, 2},
		57: {58, 4},
		58: {58, 1},
		59: {58, 3},
		60: {58, 5},
		61: {58, 1},
		62: {58, 1},
		63: {58, 1},
		64: {58, 1},
		65: {58, 5},
		66: {58, 2},
		67: {58, 3},
		68: {58, 5},
		69: {57, 1},
		70: {57, 2},
		71: {65, 1},
		72: {65, 3},
		73: {64, 0},
		74: {64, 1},
		75: {66, 1},
		76: {66, 1},
	}

	yyXErrors = map[yyXError]string{
		yyXError{0, 47}:   "invalid empty input",
		yyXError{1, -1}:   "expected $end",
		yyXError{25, -1}:  "expected ']'",
		yyXError{124, -1}: "expected '}'",
		yyXError{114, -1}: "expected ]]",
		yyXError{20, -1}:  "expected expression list or one of ['!', '(', '-', ']', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{11, -1}:  "expected expression list or one of ['!', '(', '-', '{', '}', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{18, -1}:  "expected expression list or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{54, -1}:  "expected expression or one of [$end, &&, '!', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '{', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <<, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], identifier, integer, pattern, real, slot, string, ||]",
		yyXError{61, -1}:  "expected expression or one of [$end, &&, '!', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '{', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <<, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], identifier, integer, pattern, real, slot, string, ||]",
		yyXError{85, -1}:  "expected expression or one of [$end, &&, '!', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '{', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <<, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], identifier, integer, pattern, real, slot, string, ||]",
		yyXError{26, -1}:  "expected expression or one of ['!', '(', '-', ']', '{', '}', ++, --, <<, ]], identifier, integer, pattern, real, slot, string]",
		yyXError{3, -1}:   "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{4, -1}:   "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{5, -1}:   "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{6, -1}:   "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{10, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{28, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{31, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{32, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{33, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{34, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{35, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{36, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{37, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{38, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{39, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{40, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{41, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{42, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{43, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{44, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{45, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{46, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{47, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{48, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{49, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{50, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{51, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{52, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{53, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{55, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{56, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{57, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{58, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{59, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{60, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{62, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{63, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{64, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{65, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{66, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{67, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{68, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{69, -1}:  "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{129, -1}: "expected expression or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
		yyXError{17, -1}:  "expected factor or one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <<, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, [[, \\&, \\+, \\_, ]], identifier, integer, pattern, real, slot, string, ||]",
		yyXError{12, -1}:  "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, ::, :=, :>, <<, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, [[, \\&, \\+, \\_, ]], identifier, integer, pattern, real, slot, string, ||]",
		yyXError{117, -1}: "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, ::, :=, :>, <<, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, [[, \\&, \\+, \\_, ]], identifier, integer, pattern, real, slot, string, ||]",
		yyXError{118, -1}: "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, ::, :=, :>, <<, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, [[, \\&, \\+, \\_, ]], identifier, integer, pattern, real, slot, string, ||]",
		yyXError{119, -1}: "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, ::, :=, :>, <<, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, [[, \\&, \\+, \\_, ]], identifier, integer, pattern, real, slot, string, ||]",
		yyXError{8, -1}:   "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <<, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, [[, \\&, \\+, \\_, ]], identifier, integer, pattern, real, slot, string, ||]",
		yyXError{13, -1}:  "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <<, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, [[, \\&, \\+, \\_, ]], identifier, integer, pattern, real, slot, string, ||]",
		yyXError{14, -1}:  "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <<, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, [[, \\&, \\+, \\_, ]], identifier, integer, pattern, real, slot, string, ||]",
		yyXError{15, -1}:  "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <<, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, [[, \\&, \\+, \\_, ]], identifier, integer, pattern, real, slot, string, ||]",
		yyXError{16, -1}:  "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <<, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, [[, \\&, \\+, \\_, ]], identifier, integer, pattern, real, slot, string, ||]",
		yyXError{19, -1}:  "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <<, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, [[, \\&, \\+, \\_, ]], identifier, integer, pattern, real, slot, string, ||]",
		yyXError{23, -1}:  "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <<, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, [[, \\&, \\+, \\_, ]], identifier, integer, pattern, real, slot, string, ||]",
		yyXError{112, -1}: "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <<, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, [[, \\&, \\+, \\_, ]], identifier, integer, pattern, real, slot, string, ||]",
		yyXError{115, -1}: "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <<, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, [[, \\&, \\+, \\_, ]], identifier, integer, pattern, real, slot, string, ||]",
		yyXError{121, -1}: "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <<, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, [[, \\&, \\+, \\_, ]], identifier, integer, pattern, real, slot, string, ||]",
		yyXError{122, -1}: "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <<, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, [[, \\&, \\+, \\_, ]], identifier, integer, pattern, real, slot, string, ||]",
		yyXError{125, -1}: "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <<, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, [[, \\&, \\+, \\_, ]], identifier, integer, pattern, real, slot, string, ||]",
		yyXError{127, -1}: "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <<, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, [[, \\&, \\+, \\_, ]], identifier, integer, pattern, real, slot, string, ||]",
		yyXError{128, -1}: "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <<, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, [[, \\&, \\+, \\_, ]], identifier, integer, pattern, real, slot, string, ||]",
		yyXError{7, -1}:   "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{21, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{29, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{30, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{70, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{71, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{72, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{73, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{74, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{75, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{76, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{77, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{78, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{79, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{80, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{81, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{82, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{83, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{84, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{86, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{87, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{88, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{89, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{90, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{91, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{92, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{93, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{94, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{95, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{96, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{97, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{98, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{99, -1}:  "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{100, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{101, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{102, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{103, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{104, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{105, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{106, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{107, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{108, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{109, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{110, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{111, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{130, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{131, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{132, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{133, -1}: "expected one of [$end, &&, '!', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{2, -1}:   "expected one of [$end, &&, '!', '*', '+', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '^', '|', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ||]",
		yyXError{126, -1}: "expected one of [&&, '!', ')', '*', '+', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '^', '|', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ||]",
		yyXError{22, -1}:  "expected one of [&&, '!', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{27, -1}:  "expected one of [&&, '!', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', '~', ++, --, ->, /*, /., //, //., //@, /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @*, @@, @@@, \\&, \\+, \\_, ]], ||]",
		yyXError{24, -1}:  "expected optional comma or one of [',', ']']",
		yyXError{123, -1}: "expected optional comma or one of [',', '}']",
		yyXError{113, -1}: "expected optional comma or one of [',', ]]]",
		yyXError{9, -1}:   "expected string",
		yyXError{116, -1}: "expected tag or one of [identifier, string]",
		yyXError{120, -1}: "expected tag or one of [identifier, string]",
		yyXError{0, -1}:   "expected valid input or one of ['!', '(', '-', '{', ++, --, <<, identifier, integer, pattern, real, slot, string]",
	}

	yyParseTab = [134][]uint16{
		// 0
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 79, 67: 78},
		{47: 77},
		{131, 134, 107, 106, 8: 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 105, 125, 126, 124, 114, 121, 123, 118, 115, 113, 130, 127, 111, 110, 112, 109, 108, 117, 122, 116, 119, 129, 128, 120, 47: 76},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 210},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 209},
		// 5
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 164},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 208},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 47: 26, 49: 26},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 60: 24, 24, 24},
		{46: 205},
		// 10
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 203},
		{82, 83, 81, 80, 5: 199, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 99, 65: 200},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 60: 19, 19, 19, 193},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 60: 16, 16, 16},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 60: 15, 15, 15},
		// 15
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 60: 14, 14, 14},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 60: 13, 13, 13},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 93, 8, 89, 8, 87, 88, 85, 86, 90, 91, 92, 98, 94, 60: 96, 97, 95},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 99, 65: 190},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 60: 11, 11, 11},
		// 20
		{82, 83, 81, 80, 100, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 99, 65: 101},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 47: 7, 49: 7},
		{131, 134, 107, 106, 6, 6, 6, 6, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 105, 125, 126, 124, 114, 121, 123, 118, 115, 113, 130, 127, 111, 110, 112, 109, 108, 117, 122, 116, 119, 129, 128, 120},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 60: 10, 10, 10},
		{4: 4, 6: 103, 64: 102},
		// 25
		{4: 189},
		{82, 83, 81, 80, 3, 3, 7: 3, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 104},
		{131, 134, 107, 106, 5, 5, 5, 5, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 105, 125, 126, 124, 114, 121, 123, 118, 115, 113, 130, 127, 111, 110, 112, 109, 108, 117, 122, 116, 119, 129, 128, 120},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 188},
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 47: 70, 49: 70},
		// 30
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 47: 69, 49: 69},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 187},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 186},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 185},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 184},
		// 35
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 183},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 182},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 181},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 180},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 179},
		// 40
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 178},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 177},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 176},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 175},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 174},
		// 45
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 173},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 172},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 171},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 170},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 169},
		// 50
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 168},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 167},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 166},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 165},
		{44, 44, 81, 80, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 93, 44, 89, 44, 87, 88, 85, 86, 90, 91, 92, 84, 94, 163},
		// 55
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 161},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 160},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 159},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 158},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 157},
		// 60
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 156},
		{82, 83, 81, 80, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 93, 36, 89, 36, 87, 88, 85, 86, 90, 91, 92, 84, 94, 155},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 154},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 153},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 152},
		// 65
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 151},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 150},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 149},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 148},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 147},
		// 70
		{27, 27, 107, 106, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 142, 143, 27, 27, 27, 27, 27, 27, 124, 27, 27, 27, 27, 27, 27, 27, 127, 27, 27, 27, 109, 27, 27, 27, 27, 27, 129, 128, 27, 47: 27, 49: 27},
		{131, 134, 107, 106, 28, 28, 28, 28, 132, 133, 135, 136, 28, 28, 139, 28, 141, 142, 143, 144, 28, 146, 105, 125, 126, 124, 28, 121, 123, 118, 115, 113, 130, 127, 28, 28, 28, 109, 28, 28, 122, 28, 119, 129, 128, 120, 47: 28, 49: 28},
		{29, 29, 107, 106, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 142, 143, 144, 29, 146, 29, 125, 126, 124, 29, 29, 29, 29, 115, 113, 29, 127, 29, 29, 29, 109, 29, 29, 29, 29, 119, 129, 128, 29, 47: 29, 49: 29},
		{30, 30, 107, 106, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 142, 143, 30, 30, 30, 30, 30, 30, 124, 30, 30, 30, 30, 30, 30, 30, 127, 30, 30, 30, 109, 30, 30, 30, 30, 30, 129, 128, 30, 47: 30, 49: 30},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 127, 31, 31, 31, 31, 31, 31, 31, 31, 31, 129, 128, 31, 47: 31, 49: 31},
		// 75
		{32, 134, 107, 106, 32, 32, 32, 32, 132, 133, 135, 136, 32, 32, 32, 32, 32, 142, 143, 144, 32, 146, 32, 125, 126, 124, 32, 121, 32, 32, 115, 113, 32, 127, 32, 32, 32, 109, 32, 32, 32, 32, 119, 129, 128, 32, 47: 32, 49: 32},
		{131, 134, 107, 106, 33, 33, 33, 33, 132, 133, 135, 136, 137, 33, 139, 33, 141, 142, 143, 144, 145, 146, 105, 125, 126, 124, 114, 121, 123, 118, 115, 113, 130, 127, 111, 110, 112, 109, 108, 117, 122, 33, 119, 129, 128, 120, 47: 33, 49: 33},
		{34, 134, 107, 106, 34, 34, 34, 34, 132, 133, 135, 136, 34, 34, 34, 34, 141, 142, 143, 144, 34, 146, 34, 125, 126, 124, 34, 121, 123, 34, 115, 113, 34, 127, 34, 34, 34, 109, 34, 34, 34, 34, 119, 129, 128, 34, 47: 34, 49: 34},
		{131, 134, 107, 106, 35, 35, 35, 35, 132, 133, 135, 136, 137, 35, 139, 140, 141, 142, 143, 144, 145, 146, 105, 125, 126, 124, 114, 121, 123, 118, 115, 113, 130, 127, 111, 110, 112, 109, 108, 117, 122, 116, 119, 129, 128, 120, 47: 35, 49: 35},
		{131, 134, 107, 106, 37, 37, 37, 37, 132, 133, 135, 136, 37, 37, 139, 37, 141, 142, 143, 144, 145, 146, 105, 125, 126, 124, 114, 121, 123, 118, 115, 113, 130, 127, 37, 110, 112, 109, 108, 117, 122, 37, 119, 129, 128, 120, 47: 37, 49: 37},
		// 80
		{38, 38, 107, 106, 38, 38, 38, 38, 38, 38, 135, 38, 38, 38, 38, 38, 38, 142, 143, 144, 38, 146, 38, 125, 126, 124, 38, 38, 38, 38, 115, 113, 38, 127, 38, 38, 38, 109, 38, 38, 38, 38, 119, 129, 128, 38, 47: 38, 49: 38},
		{39, 39, 107, 106, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 142, 143, 144, 39, 146, 39, 125, 126, 124, 39, 39, 39, 39, 115, 113, 39, 127, 39, 39, 39, 109, 39, 39, 39, 39, 119, 129, 128, 39, 47: 39, 49: 39},
		{40, 40, 107, 106, 40, 40, 40, 40, 132, 133, 135, 136, 40, 40, 40, 40, 40, 142, 143, 144, 40, 146, 40, 125, 126, 124, 40, 40, 40, 40, 115, 113, 40, 127, 40, 40, 40, 109, 40, 40, 40, 40, 119, 129, 128, 40, 47: 40, 49: 40},
		{41, 41, 107, 106, 41, 41, 41, 41, 132, 41, 135, 136, 41, 41, 41, 41, 41, 142, 143, 144, 41, 146, 41, 125, 126, 124, 41, 41, 41, 41, 115, 113, 41, 127, 41, 41, 41, 109, 41, 41, 41, 41, 119, 129, 128, 41, 47: 41, 49: 41},
		{42, 42, 107, 106, 42, 42, 42, 42, 42, 42, 135, 136, 42, 42, 42, 42, 42, 142, 143, 144, 42, 146, 42, 125, 126, 124, 42, 42, 42, 42, 115, 113, 42, 127, 42, 42, 42, 109, 42, 42, 42, 42, 119, 129, 128, 42, 47: 42, 49: 42},
		// 85
		{45, 45, 81, 80, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 93, 45, 89, 45, 87, 88, 85, 86, 90, 91, 92, 84, 94, 164},
		{43, 43, 107, 106, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 142, 143, 43, 43, 146, 43, 125, 126, 124, 43, 43, 43, 43, 115, 113, 43, 127, 43, 43, 43, 109, 43, 43, 43, 43, 43, 129, 128, 43, 47: 43, 49: 43},
		{131, 134, 107, 106, 73, 73, 73, 73, 132, 133, 135, 136, 73, 73, 139, 73, 141, 142, 143, 144, 73, 146, 73, 125, 126, 124, 73, 121, 123, 118, 115, 113, 73, 127, 73, 73, 73, 109, 73, 73, 122, 73, 119, 129, 128, 120, 47: 73, 49: 73},
		{131, 134, 107, 106, 46, 46, 46, 46, 132, 133, 135, 136, 46, 46, 139, 46, 141, 142, 143, 144, 46, 146, 105, 125, 126, 124, 46, 121, 123, 118, 115, 113, 46, 127, 46, 46, 46, 109, 46, 46, 122, 46, 119, 129, 128, 120, 47: 46, 49: 46},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 127, 47, 47, 47, 47, 47, 47, 47, 47, 47, 129, 128, 47, 47: 47, 49: 47},
		// 90
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 127, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 128, 48, 47: 48, 49: 48},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 127, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 128, 49, 47: 49, 49: 49},
		{50, 50, 107, 106, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 142, 143, 50, 50, 146, 50, 125, 126, 124, 50, 50, 50, 50, 115, 113, 50, 127, 50, 50, 50, 109, 50, 50, 50, 50, 50, 129, 128, 50, 47: 50, 49: 50},
		{51, 51, 107, 106, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 142, 143, 51, 51, 146, 51, 125, 126, 124, 51, 51, 51, 51, 115, 113, 51, 127, 51, 51, 51, 109, 51, 51, 51, 51, 51, 129, 128, 51, 47: 51, 49: 51},
		{52, 52, 107, 106, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 142, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 127, 52, 52, 52, 52, 52, 52, 52, 52, 52, 129, 128, 52, 47: 52, 49: 52},
		// 95
		{53, 134, 107, 106, 53, 53, 53, 53, 132, 133, 135, 136, 53, 53, 53, 53, 141, 142, 143, 144, 53, 146, 53, 125, 126, 124, 53, 121, 53, 53, 115, 113, 53, 127, 53, 53, 53, 109, 53, 53, 53, 53, 119, 129, 128, 53, 47: 53, 49: 53},
		{54, 134, 107, 106, 54, 54, 54, 54, 132, 133, 135, 136, 54, 54, 139, 54, 141, 142, 143, 144, 54, 146, 54, 125, 126, 124, 54, 121, 123, 118, 115, 113, 54, 127, 54, 54, 54, 109, 54, 54, 54, 54, 119, 129, 128, 54, 47: 54, 49: 54},
		{55, 134, 107, 106, 55, 55, 55, 55, 132, 133, 135, 136, 55, 55, 55, 55, 55, 142, 143, 144, 55, 146, 55, 125, 126, 124, 55, 55, 55, 55, 115, 113, 55, 127, 55, 55, 55, 109, 55, 55, 55, 55, 119, 129, 128, 55, 47: 55, 49: 55},
		{56, 134, 107, 106, 56, 56, 56, 56, 132, 133, 135, 136, 56, 56, 139, 56, 141, 142, 143, 144, 56, 146, 56, 125, 126, 124, 56, 121, 123, 118, 115, 113, 56, 127, 56, 56, 56, 109, 56, 56, 122, 56, 119, 129, 128, 56, 47: 56, 49: 56},
		{57, 57, 107, 106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 142, 143, 57, 57, 146, 57, 125, 126, 124, 57, 57, 57, 57, 115, 113, 57, 127, 57, 57, 57, 109, 57, 57, 57, 57, 57, 129, 128, 57, 47: 57, 49: 57},
		// 100
		{58, 134, 107, 106, 58, 58, 58, 58, 132, 133, 135, 136, 58, 58, 139, 58, 141, 142, 143, 144, 58, 146, 58, 125, 126, 124, 58, 121, 123, 58, 115, 113, 58, 127, 58, 58, 58, 109, 58, 58, 58, 58, 119, 129, 128, 58, 47: 58, 49: 58},
		{131, 134, 107, 106, 59, 59, 59, 59, 132, 133, 135, 136, 59, 59, 139, 59, 141, 142, 143, 144, 145, 146, 105, 125, 126, 124, 114, 121, 123, 118, 115, 113, 130, 127, 59, 59, 59, 109, 108, 59, 122, 59, 119, 129, 128, 120, 47: 59, 49: 59},
		{131, 134, 107, 106, 60, 60, 60, 60, 132, 133, 135, 136, 137, 60, 139, 60, 141, 142, 143, 144, 145, 146, 105, 125, 126, 124, 114, 121, 123, 118, 115, 113, 130, 127, 111, 110, 112, 109, 108, 117, 122, 60, 119, 129, 128, 120, 47: 60, 49: 60},
		{61, 61, 107, 106, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 142, 143, 61, 61, 146, 61, 125, 126, 124, 61, 61, 61, 61, 115, 113, 61, 127, 61, 61, 61, 109, 61, 61, 61, 61, 61, 129, 128, 61, 47: 61, 49: 61},
		{131, 134, 107, 106, 62, 62, 62, 62, 132, 133, 135, 136, 62, 62, 139, 62, 141, 142, 143, 144, 145, 146, 105, 125, 126, 124, 62, 121, 123, 118, 115, 113, 130, 127, 62, 62, 62, 109, 62, 62, 122, 62, 119, 129, 128, 120, 47: 62, 49: 62},
		// 105
		{63, 63, 107, 106, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 142, 143, 63, 63, 146, 63, 125, 126, 124, 63, 63, 63, 63, 115, 113, 63, 127, 63, 63, 63, 109, 63, 63, 63, 63, 63, 129, 128, 63, 47: 63, 49: 63},
		{131, 134, 107, 106, 64, 64, 64, 64, 132, 133, 135, 136, 64, 64, 139, 64, 141, 142, 143, 144, 145, 146, 105, 125, 126, 124, 114, 121, 123, 118, 115, 113, 130, 127, 64, 110, 64, 109, 108, 117, 122, 64, 119, 129, 128, 120, 47: 64, 49: 64},
		{131, 134, 107, 106, 65, 65, 65, 65, 132, 133, 135, 136, 137, 65, 139, 65, 141, 142, 143, 144, 145, 146, 105, 125, 126, 124, 114, 121, 123, 118, 115, 113, 130, 127, 65, 110, 112, 109, 108, 117, 122, 65, 119, 129, 128, 120, 47: 65, 49: 65},
		{131, 134, 107, 106, 66, 66, 66, 66, 132, 133, 135, 136, 66, 66, 139, 66, 141, 142, 143, 144, 145, 146, 105, 125, 126, 124, 114, 121, 123, 118, 115, 113, 130, 127, 66, 66, 66, 109, 108, 117, 122, 66, 119, 129, 128, 120, 47: 66, 49: 66},
		{67, 67, 107, 106, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 142, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 127, 67, 67, 67, 67, 67, 67, 67, 67, 67, 129, 128, 67, 47: 67, 49: 67},
		// 110
		{131, 134, 107, 106, 68, 68, 68, 68, 132, 133, 135, 136, 68, 68, 139, 68, 141, 142, 143, 144, 145, 146, 105, 125, 126, 124, 114, 121, 123, 118, 115, 113, 130, 127, 68, 68, 68, 109, 68, 68, 122, 68, 119, 129, 128, 120, 47: 68, 49: 68},
		{131, 134, 107, 106, 71, 71, 71, 71, 132, 133, 135, 136, 71, 71, 139, 71, 141, 142, 143, 144, 71, 146, 71, 125, 126, 124, 71, 121, 123, 118, 115, 113, 71, 127, 71, 71, 71, 109, 71, 71, 122, 71, 119, 129, 128, 120, 47: 71, 49: 71},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 60: 9, 9, 9},
		{6: 103, 4, 64: 191},
		{7: 192},
		// 115
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 60: 12, 12, 12},
		{46: 196, 48: 195, 66: 194},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 60: 18, 18, 18, 197},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 60: 2, 2, 2, 2},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 60: 1, 1, 1, 1},
		// 120
		{46: 196, 48: 195, 66: 198},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 60: 17, 17, 17},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 60: 21, 21, 21},
		{5: 4, 103, 64: 201},
		{5: 202},
		// 125
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 60: 20, 20, 20},
		{131, 134, 107, 106, 8: 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 105, 125, 126, 124, 114, 121, 123, 118, 115, 113, 130, 127, 111, 110, 112, 109, 108, 117, 122, 116, 119, 129, 128, 120, 49: 204},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 60: 22, 22, 22},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 60: 23, 23, 23},
		{82, 83, 81, 80, 46: 93, 48: 89, 50: 87, 88, 85, 86, 90, 91, 92, 84, 94, 207},
		// 130
		{131, 134, 107, 106, 25, 25, 25, 25, 132, 133, 135, 136, 25, 25, 139, 25, 141, 142, 143, 144, 145, 146, 105, 125, 126, 124, 25, 121, 123, 118, 115, 113, 130, 127, 25, 25, 25, 109, 25, 25, 122, 25, 119, 129, 128, 120, 47: 25, 49: 25},
		{72, 72, 107, 106, 72, 72, 72, 72, 72, 72, 135, 72, 72, 72, 72, 72, 72, 142, 143, 144, 72, 146, 72, 125, 126, 124, 72, 72, 72, 72, 115, 113, 72, 127, 72, 72, 72, 109, 72, 72, 72, 72, 119, 129, 128, 72, 47: 72, 49: 72},
		{74, 74, 107, 106, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 142, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 127, 74, 74, 74, 74, 74, 74, 74, 74, 74, 129, 128, 74, 47: 74, 49: 74},
		{75, 75, 107, 106, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 142, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 127, 75, 75, 75, 75, 75, 75, 75, 75, 75, 129, 128, 75, 47: 75, 49: 75},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("'%c'", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), __yyfmt__.Sprint(yylex.(*lexer).sdump())+` `+prettyString(lval.Token): %v\n", yySymName(n), n, n, __yyfmt__.Sprint(yylex.(*lexer).sdump())+` `+prettyString(lval.Token))
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 69

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.Node = &start{
				Expression: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 2:
		{
			yyVAL.Node = &Expression{
				Token:      yyS[yypt-1].Token,
				Expression: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 3:
		{
			yyVAL.Node = &Expression{
				Case:       1,
				Token:      yyS[yypt-1].Token,
				Expression: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 4:
		{
			yyVAL.Node = &Expression{
				Case:       2,
				Token:      yyS[yypt-1].Token,
				Expression: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 5:
		{
			yyVAL.Node = &Expression{
				Case:       3,
				Token:      yyS[yypt-1].Token,
				Expression: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 6:
		{
			yyVAL.Node = &Expression{
				Case:        4,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 7:
		{
			yyVAL.Node = &Expression{
				Case:       5,
				Expression: yyS[yypt-1].Node.(*Expression),
				Token:      yyS[yypt-0].Token,
			}
		}
	case 8:
		{
			yyVAL.Node = &Expression{
				Case:       6,
				Expression: yyS[yypt-1].Node.(*Expression),
				Token:      yyS[yypt-0].Token,
			}
		}
	case 9:
		{
			yyVAL.Node = &Expression{
				Case:        7,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 10:
		{
			yyVAL.Node = &Expression{
				Case:        8,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 11:
		{
			yyVAL.Node = &Expression{
				Case:        9,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 12:
		{
			yyVAL.Node = &Expression{
				Case:        10,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 13:
		{
			yyVAL.Node = &Expression{
				Case:        11,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 14:
		{
			yyVAL.Node = &Expression{
				Case:        12,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 15:
		{
			yyVAL.Node = &Expression{
				Case:        13,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 16:
		{
			yyVAL.Node = &Expression{
				Case:        14,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 17:
		{
			yyVAL.Node = &Expression{
				Case:        15,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 18:
		{
			yyVAL.Node = &Expression{
				Case:        16,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 19:
		{
			yyVAL.Node = &Expression{
				Case:        17,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 20:
		{
			yyVAL.Node = &Expression{
				Case:        18,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 21:
		{
			yyVAL.Node = &Expression{
				Case:        19,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 22:
		{
			yyVAL.Node = &Expression{
				Case:        20,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 23:
		{
			yyVAL.Node = &Expression{
				Case:        21,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 24:
		{
			yyVAL.Node = &Expression{
				Case:        22,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 25:
		{
			yyVAL.Node = &Expression{
				Case:        23,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 26:
		{
			yyVAL.Node = &Expression{
				Case:        24,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 27:
		{
			yyVAL.Node = &Expression{
				Case:        25,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 28:
		{
			yyVAL.Node = &Expression{
				Case:        26,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 29:
		{
			yyVAL.Node = &Expression{
				Case:        27,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 30:
		{
			yyVAL.Node = &Expression{
				Case:        28,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 31:
		{
			yyVAL.Node = &Expression{
				Case:        29,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 32:
		{
			yyVAL.Node = &Expression{
				Case:       30,
				Expression: yyS[yypt-2].Node.(*Expression),
				Token:      yyS[yypt-1].Token,
				Token2:     yyS[yypt-0].Token,
			}
		}
	case 33:
		{
			yyVAL.Node = &Expression{
				Case:       31,
				Expression: yyS[yypt-1].Node.(*Expression),
				Token:      yyS[yypt-0].Token,
			}
		}
	case 34:
		{
			yyVAL.Node = &Expression{
				Case:        32,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 35:
		{
			yyVAL.Node = &Expression{
				Case:        33,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 36:
		{
			yyVAL.Node = &Expression{
				Case:        34,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 37:
		{
			yyVAL.Node = &Expression{
				Case:        35,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 38:
		{
			yyVAL.Node = &Expression{
				Case:        36,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 39:
		{
			yyVAL.Node = &Expression{
				Case:        37,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 40:
		{
			yyVAL.Node = &Expression{
				Case:        38,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 41:
		{
			yyVAL.Node = &Expression{
				Case:       39,
				Expression: yyS[yypt-1].Node.(*Expression),
				Token:      yyS[yypt-0].Token,
			}
		}
	case 42:
		{
			yyVAL.Node = &Expression{
				Case:        40,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 43:
		{
			yyVAL.Node = &Expression{
				Case:        41,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 44:
		{
			yyVAL.Node = &Expression{
				Case:        42,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 45:
		{
			yyVAL.Node = &Expression{
				Case:        43,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 46:
		{
			yyVAL.Node = &Expression{
				Case:        44,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 47:
		{
			yyVAL.Node = &Expression{
				Case:        45,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 48:
		{
			yyVAL.Node = &Expression{
				Case:        46,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 49:
		{
			yyVAL.Node = &Expression{
				Case:        47,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 50:
		{
			yyVAL.Node = &Expression{
				Case:        48,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 51:
		{
			yyVAL.Node = &Expression{
				Case:   49,
				Factor: yyS[yypt-0].Node.(*Factor),
			}
		}
	case 52:
		{
			yyVAL.Node = &Expression{
				Case:       50,
				Factor:     yyS[yypt-2].Node.(*Factor),
				Token:      yyS[yypt-1].Token,
				Expression: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 53:
		{
			yyVAL.Node = &Term{
				Token: yyS[yypt-0].Token,
			}
		}
	case 54:
		{
			yyVAL.Node = &Term{
				Case:   1,
				Token:  yyS[yypt-1].Token,
				Token2: yyS[yypt-0].Token,
			}
		}
	case 55:
		{
			yyVAL.Node = &Term{
				Case:       2,
				Token:      yyS[yypt-2].Token,
				Expression: yyS[yypt-1].Node.(*Expression),
				Token2:     yyS[yypt-0].Token,
			}
		}
	case 56:
		{
			yyVAL.Node = &Term{
				Case:   3,
				Token:  yyS[yypt-1].Token,
				Token2: yyS[yypt-0].Token,
			}
		}
	case 57:
		{
			yyVAL.Node = &Term{
				Case:     4,
				Token:    yyS[yypt-3].Token,
				ExprList: yyS[yypt-2].Node.(*ExprList).reverse(),
				CommaOpt: yyS[yypt-1].Node.(*CommaOpt),
				Token2:   yyS[yypt-0].Token,
			}
		}
	case 58:
		{
			yyVAL.Node = &Term{
				Case:  5,
				Token: yyS[yypt-0].Token,
			}
		}
	case 59:
		{
			yyVAL.Node = &Term{
				Case:   6,
				Token:  yyS[yypt-2].Token,
				Token2: yyS[yypt-1].Token,
				Tag:    yyS[yypt-0].Node.(*Tag),
			}
		}
	case 60:
		{
			yyVAL.Node = &Term{
				Case:   7,
				Token:  yyS[yypt-4].Token,
				Token2: yyS[yypt-3].Token,
				Tag:    yyS[yypt-2].Node.(*Tag),
				Token3: yyS[yypt-1].Token,
				Tag2:   yyS[yypt-0].Node.(*Tag),
			}
		}
	case 61:
		{
			yyVAL.Node = &Term{
				Case:  8,
				Token: yyS[yypt-0].Token,
			}
		}
	case 62:
		{
			yyVAL.Node = &Term{
				Case:  9,
				Token: yyS[yypt-0].Token,
			}
		}
	case 63:
		{
			yyVAL.Node = &Term{
				Case:  10,
				Token: yyS[yypt-0].Token,
			}
		}
	case 64:
		{
			yyVAL.Node = &Term{
				Case:  11,
				Token: yyS[yypt-0].Token,
			}
		}
	case 65:
		{
			yyVAL.Node = &Term{
				Case:     12,
				Term:     yyS[yypt-4].Node.(*Term),
				Token:    yyS[yypt-3].Token,
				ExprList: yyS[yypt-2].Node.(*ExprList).reverse(),
				CommaOpt: yyS[yypt-1].Node.(*CommaOpt),
				Token2:   yyS[yypt-0].Token,
			}
		}
	case 66:
		{
			yyVAL.Node = &Term{
				Case:  13,
				Term:  yyS[yypt-1].Node.(*Term),
				Token: yyS[yypt-0].Token,
			}
		}
	case 67:
		{
			yyVAL.Node = &Term{
				Case:   14,
				Term:   yyS[yypt-2].Node.(*Term),
				Token:  yyS[yypt-1].Token,
				Token2: yyS[yypt-0].Token,
			}
		}
	case 68:
		{
			yyVAL.Node = &Term{
				Case:     15,
				Term:     yyS[yypt-4].Node.(*Term),
				Token:    yyS[yypt-3].Token,
				ExprList: yyS[yypt-2].Node.(*ExprList).reverse(),
				CommaOpt: yyS[yypt-1].Node.(*CommaOpt),
				Token2:   yyS[yypt-0].Token,
			}
		}
	case 69:
		{
			yyVAL.Node = &Factor{
				Term: yyS[yypt-0].Node.(*Term),
			}
		}
	case 70:
		{
			yyVAL.Node = &Factor{
				Case:   1,
				Term:   yyS[yypt-1].Node.(*Term),
				Factor: yyS[yypt-0].Node.(*Factor),
			}
		}
	case 71:
		{
			yyVAL.Node = &ExprList{
				Expression: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 72:
		{
			yyVAL.Node = &ExprList{
				Case:       1,
				ExprList:   yyS[yypt-2].Node.(*ExprList),
				Token:      yyS[yypt-1].Token,
				Expression: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 73:
		{
			yyVAL.Node = (*CommaOpt)(nil)
		}
	case 74:
		{
			yyVAL.Node = &CommaOpt{
				Token: yyS[yypt-0].Token,
			}
		}
	case 75:
		{
			yyVAL.Node = &Tag{
				Token: yyS[yypt-0].Token,
			}
		}
	case 76:
		{
			yyVAL.Node = &Tag{
				Case:  1,
				Token: yyS[yypt-0].Token,
			}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
